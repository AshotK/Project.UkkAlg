#include <vector>
#include <algorithm>
#include <string>
#include <limits>
#include <stdio.h>
using namespace std;

const int inf = numeric_limits<int>::max();
typedef unsigned char UChar;

// Представление ссылки в нашем суффиксном дереве
struct Link {
   int start, end;
   int to;

   // По умолчанию: недопустимая ссылка
   Link() {
      to = -1;
   }

   // Связь с заданными параметрами
   Link(int _start, int _end, int _to) {
      start = _start;
      end = _end;
      to = _to;
   }
};

// Представляет явную вершину в нашем дереве суффиксов
struct Vertex {
   vector<Link> links;      // Форма ссылки
   int suffix;            // Суффиксная ссылка

   Vertex() {
      links.assign(256, Link());
      suffix = -1;
   }
};

// Все суффиксное дерево
vector<Vertex> tree;
int root, dummy;

// Образец построен для 
string samp;

// Возвращает символ с заданным индексом. Понимает отрицательные значения
UChar t(int i) {
   return (i<0) ? (-i-1) : sample[i];
}

// Создает новую вершину в дереве суффиксов
int newVertex()
{
   int i = tree.size();
   tree.push_back(Vertex());
   return i;
}

// Создает ссылку в суффиксном дереве
// to, from - две вершины
// [start, end) - слово на краю
void link(int from, int start, int end, int to)
{
   tree[from].links[t(start)] = Link(start, end, to);
}

// Функция f (идет по суффиксной ссылке)
int &f(int v)
{
   return tree[v].suffix;
}

// Печатает дерево в stdout для отладки
void print(int v, int start = 0, int end = 0, string prefix = "") {
   // Что написано на краю, который ведет сюда
   printf("%s", prefix.c_str());
   for(int i=start; i<end && i<sample.length(); i++)
      printf("%c", t(i));
   if(end == inf) printf("@");

   // Эта вершина и ее суффиксная ссылка
   printf(" [%2d]", v);
   if(f(v) != -1)
      printf(" f = %d", f(v));
   printf("\n");

   // Дети
   for(int i=0; i<256; i++)
      if(tree[v].links[i].to != -1) {
         print(tree[v].links[i].to, tree[v].links[i].start,
               tree[v].links[i].end, prefix+"   ");
      }
}

// Инициализирует суффиксное дерево
// Создает две вершины: root и dummy (родитель root)
void initTree()
{
   tree.clear();
   dummy = newVertex();
   root = newVertex();

   f(root) = dummy;
   for(int i=0; i<256; i++)
      link(dummy, -i-1, -i, root);
}

// Канонизирует контрольную пару (v, (start, end)) состояния (probably implicit)
pair<int, int> canonize(int v, int start, int end)
{
   if(end <= start) {
      return make_pair(v, start);
   } else {
      Link cur = tree[v].links[t(start)];
      while(end - start >= cur.end - cur.start) {   
         start += cur.end - cur.start;
         v = cur.to;
         if(end > start)
            cur = tree[v].links[t(start)];
      }
      return make_pair(v, start);
   }
}

// Проверяет, есть ли t-переход от (probably implicit)
// Форма (структура) (v, (start, end))
pair<bool, int> testAndSplit(int v, int start, int end, UChar c)
{
   if(end <= start) {
      return make_pair(tree[v].links[c].to != -1, v);
   } else {
      Link cur = tree[v].links[t(start)];
      if(c == t(cur.start + end - start))
         return make_pair(true, v);

      int middle = newVertex();
      link(v, cur.start, cur.start + end - start, middle);
      link(middle, cur.start + end - start, cur.end, cur.to);
      return make_pair(false, middle);
   }
}

// Создает новые ветви
// (v, (start, end)) - активная точка (ее каноническая контрольная пара)
//
// Мы хотим добавить t (конец) - переход к этой точке и к f (от нее), f (f (от нее)) и так далее до конечной точки
//
// ПРИМЕЧАНИЕ: конец должен быть правильным индексом в строке примера
pair<int, int> update(int v, int start, int end) {
   Link cur = tree[v].links[t(start)];
   pair<bool, int> splitRes;
   int oldR = root;

   splitRes = testAndSplit(v, start, end, t(end));
   while(!splitRes.first) {
      // Add a new branch
      link(splitRes.second, end, inf, newVertex());

      // Create a suffix link from the prev. branching vertex
      if(oldR != root)
         f(oldR) = splitRes.second;
      oldR = splitRes.second;

      // Go to the next vertex (in the final set of STrie(T_end))
      pair<int, int> newPoint = canonize(f(v), start, end);
      v = newPoint.first;
      start = newPoint.second;
      splitRes = testAndSplit(v, start, end, t(end));
   }
   if(oldR != root)
      f(oldR) = splitRes.second;
   return make_pair(v, start);
}

// Создает полное дерево суффиксов для образца строки
void ukkonen()
{
   // Инициализирует дерево
   initTree();

   // Добавление символов по пдному
   pair<int, int> activePoint = make_pair(root, 0);
   for(int i=0; i<sample.length(); i++) {
      activePoint = update(activePoint.first, activePoint.second, i);
      activePoint = canonize(activePoint.first, activePoint.second, i+1);
   }
}

// Тест: проверка, находится ли слово в дереве
bool present(string word)
{
   int v=root, start=0, end=0;
   for(int i=0; i<word.length(); i++) {
      UChar cur = word[i];
      if(end==start) {
         if(tree[v].links[cur].to==-1) return false;
         start = tree[v].links[cur].start;
         end = start+1;
      } else {
         if(cur != t(end)) return false;
         end++;
      }
      if(end==tree[v].links[t(start)].end) {
         v = tree[v].links[t(start)].to;
         start=0;
         end=0;
      }
   }
   return true;
}

// Небольшой тест: «индексирует» текст и ищет подстроки в нем
char inBig[1000], inSmall[1000];

int main() {
   // Попросит текст
   printf("Пожалуйста, введите текст: \n");
   fgets(inBig, sizeof inBig, stdin);
   sample = string(inBig);
   if(sample.length() != 0 && *(sample.end()-1)=='\n')
      sample.erase(sample.end()-1);

   // Создание и постройка дерева
   ukkonen();
   print(root);
   printf("\nСнова ваш текст: %s\n", sample.c_str());
   
   // Обработка запросов
   printf("\nТеперь вы можете искать подстроки. Введите \ "exit \", чтобы выйти.\n");
   while(true) {
      printf("Искать: ");
      fgets(inSmall, sizeof inSmall, stdin);
      string what(inSmall);
      if(what.length() != 0 && what[what.length()-1]=='\n')
         what.resize(what.length()-1);
      if(what=="exit") break;
      printf("Результат: %s\n", present(what)? "Положительный" : "Отрицательный");
   }
   return 0;
}
